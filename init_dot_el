;; ************ melpa **************
(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
;; ************ directories *******************
(add-to-list 'load-path "~/.emacs.d/elpa/company-0.9.3")
(add-to-list 'load-path "~/.emacs.d/elisp/")
;; ************ close auto backup *************
(setq make-backup-files nil)
;; ************ semantic **********************
;; (require 'cc-mode)
;; (require 'semantic)
;; (global-semanticdb-minor-mode 1)
;; (global-semantic-idle-scheduler-mode 1)
;; (global-semantic-idle-summary-mode 1)
;; (semantic-mode 1)
;; (defun my-semantic-hook()
;;   ;; add entry here to allow semantic complete extern contents
;;   (semantic-remove-system-include "/usr/include")
;;   (semantic-add-system-include "C:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include")
;;   )
;; (add-hook 'semantic-init-hooks 'my-semantic-hook)
;; ************ company mode ******************
(require 'company)
(add-hook 'c-mode-common-hook 'company-mode)
(add-hook 'c++-mode-common-hook 'company-mode)
;; ************ ede *****************
;; (require 'ede)
;; (global-ede-mode)
;; (load "ede_projects.el")
;; ************ hs mode ***********
(add-hook 'c-mode-common-hook 'hs-minor-mode)
(add-hook 'c++-mode-common-hook 'hs-minor-mode)
;; ************ parenthesis ************
(show-paren-mode t)
(electric-pair-mode t)
(defadvice show-paren-function
  (after show-matching-paren-offscreen activate)
  (interactive)
  (let* ((cb (char-before (point)))
	 (matching-text (and cb
			     (char-equal (char-syntax cb) ?\) )
			     (blink-matching-open))))
    (when matching-text (message matching-text))))
;; ************ color-threme ***********
(add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/ahungry-theme-1.4.0")
;; (setq ahungry-theme-font-settings nil)
(load-theme 'ahungry t)
;; ************ indent&tab *************
(setq-default indent-tabs-mode nil)
(setq default-tab-width 4)
(setq-default c-basic-offset 4)
(defun my-c-mode-hook ()
  (c-set-offset 'innamespace 0))
(add-hook 'c-mode-hook 'my-c-mode-hook)
(add-hook 'c++-mode-hook 'my-c-mode-hook)
;;(setq-default c-set-offset 'innamespace '0)
;; ************ auto c++-mode for *.h ************
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
;; ************ auto linum-mode ******************
(global-linum-mode t)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages (quote (ahungry-theme company)))
 '(show-paren-mode t)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "仿宋" :foundry "outline" :slant normal :weight normal :height 143 :width normal)))))
